package org.firstinspires.ftc.teamcode.drive;

import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;

import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;

/*
 * This is an example of a more complex path to really test the tuning.
 */
@Autonomous(group = "drive")
public class BlueTerminal extends LinearOpMode {
    @Override
    public void runOpMode() throws InterruptedException {
        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);

        Pose2d startPose = new Pose2d(34.25, -62.375, Math.toRadians(90));
        drive.setPoseEstimate(startPose);

        waitForStart();

        if (isStopRequested()) return;

        drive.servo.setPosition(1);
        sleep(1000);


        TrajectorySequence trajSeq = drive.trajectorySequenceBuilder(new Pose2d(34.25, -62.375, Math.toRadians(90)))

                .addTemporalMarker(1.5, () ->{
                    //lift to high pos
                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                    drive.liftMotor.setPower(-1);

                })

                .addTemporalMarker(4, () ->{
                    //hold lift position high
                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    drive.liftMotor.setTargetPosition(drive.liftMotor.getCurrentPosition());
                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    drive.liftMotor.setPower(.1);

                })

//                .addTemporalMarker(6, () -> {
//                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
//                    drive.liftMotor.setPower(-1);
//                })
//
//                .addTemporalMarker(6.4, () -> {
//                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
//                    drive.liftMotor.setTargetPosition(drive.liftMotor.getCurrentPosition());
//                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
//                    drive.liftMotor.setPower(.1);
//                })


                .forward(48)
                .lineToSplineHeading(new Pose2d(31, -5.5, Math.toRadians(128)))
                .addDisplacementMarker(() ->{
                    //drop lift
                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                    drive.liftMotor.setPower(.1);
                })

                .waitSeconds(1)

//                .addDisplacementMarker(() ->{
//                    //open the servo
//                    drive.servo.setPosition(0);    //set servo pos to 0;
//                })

//                .back(6)
//                .lineToSplineHeading(new Pose2d(60.5, -13.75, Math.toRadians(0)))
//
//                .addDisplacementMarker( () -> {
//                    drive.servo.setPosition(1);
//                })

//                .waitSeconds(1.5)
//
//                .addDisplacementMarker( () -> {
//                    drive.liftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
//                    drive.liftMotor.setPower(-1);
//                })
//
//                .back(24)
                .build();

        drive.followTrajectorySequence(trajSeq);

        //sleep(2000);

//        drive.followTrajectory(
//                drive.trajectoryBuilder(new Pose2d(34.25, -62.375, Math.toRadians(90)))
//                        .forward(48)
//                        .build()
//        );
    }
}
